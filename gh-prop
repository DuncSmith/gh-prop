#!/usr/bin/env bash
set -e

usage() {
  cat <<EOF
Usage: gh prop <command> [options]

Manage repository custom properties

Commands:
  list        List properties for a repository
  set         Set a property for a repository
  schema      Get the schema for an organization

Options:
  -r <owner/repo>   Specify the owner and repository name
  -p <property>     The name of the property
  -v <value>        The value of the property

Examples:
  gh prop list
  gh prop list -r octocat/hello-world
  gh prop set -r octocat/hello-world -p Team -v "Team A"
  gh prop schema
  gh prop schema octocat
}
EOF
}

set_property() {
  local repo='{owner}/{repo}'
  local prop
  local value
  if [ $# -eq 0 ]; then
    usage
    return 1
  fi

  while getopts "r:p:v:" opt; do
    case $opt in
      r) repo="$OPTARG" ;;
      p) prop="$OPTARG" ;;
      v) value="$OPTARG" ;;
      *) usage ;;
    esac
  done

  if [ -z "$prop" ] || [ -z "$value" ]; then
    echo "error: missing required option" >&2
    usage
    return 1
  fi

  gh api \
    --method PATCH \
    -H "Accept: application/vnd.github+json" \
    -H "X-GitHub-Api-Version: 2022-11-28" \
    /repos/"$repo"/properties/values \
    -f "properties[][property_name]=$prop" -f "properties[][value]=$value"
}

list() {
  local repo='{owner}/{repo}'

  while getopts "r:" opt; do
    case $opt in
      r) repo="$OPTARG" ;;
      *) usage ;;
    esac
  done

  if [ -z "$repo" ]; then
    usage
    return 1
  fi

  gh api \
    -H "Accept: application/vnd.github+json" \
    -H "X-GitHub-Api-Version: 2022-11-28" \
    /repos/"$repo"/properties/values
}

schema() {
  local owner='{owner}'
  [ $# -eq 0 ] || owner="$1"

  gh api \
  -H "Accept: application/vnd.github+json" \
  -H "X-GitHub-Api-Version: 2022-11-28" \
  /orgs/"$owner"/properties/schema
}

cmd="$1"
[ $# -eq 0 ] || shift 1

case "$cmd" in
-h|--help)
  usage
  ;;
set)
  set_property "$@"
  ;;
list)
  list "$@"
  ;;
schema)
  schema "$@"
  ;;
*)
  usage >&2
  exit 1
  ;;
esac
